{
    "Description": "Create a VPC and a public subnet and two private subnet",
    "Resources": {
        "myVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default",
                "Tags": [{
                    "Key": "Name",
                    "Value": "myVPC"
                }]
            }
        },
        "Public": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": "ap-northeast-1a",
                "CidrBlock": "10.0.0.0/24",
                "VpcId": {
                    "Ref": "myVPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "PublicSubnet"
                }]
            }
        },
        "Private1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": "ap-northeast-1a",
                "CidrBlock": "10.0.1.0/24",
                "VpcId": {
                    "Ref": "myVPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "myPrivateSubnet1"
                }]
            }
        },
        "Private2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": "ap-northeast-1c",
                "CidrBlock": "10.0.2.0/24",
                "VpcId": {
                    "Ref": "myVPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "myPrivateSubnet2"
                }]
            }
        },
        "NetworkAclPrivate": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "myVPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "myNetworkAclPrivate"
                }]
            }
        },

        "SubnetNetworkAclAssociationPrivate1": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Private1"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                }
            }
        },
        "SubnetNetworkAclAssociationPrivate2": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Private2"
                },
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                }
            }
        },

        "SubnetNetworkAclAssociationPublic": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Public"
                },
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                }
            }
        },
        "PublicInboundRule120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "81",
                    "To": "81"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 120
            }
        },
        "PublicInboundRule123": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": 17,
                "RuleAction": "allow",
                "RuleNumber": 123
            }
        },
        "PublicInboundRule140": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 140
            }
        },
        "PublicInboundRule198": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 198
            }
        },
        "PublicInboundRule200": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "203.234.110.81/32",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 200
            }
        },
        "PublicInboundRule201": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "222.110.22.8/32",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 201
            }
        },
        "PublicInboundRule202": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "52.6.1.1/32",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 202
            }
        },
        "PublicInboundRule3306": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "3306",
                    "To": "3306"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 3306
            }
        },
        "PublicInboundRule6379": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "6379",
                    "To": "6379"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 6379
            }
        },

        "PublicInboundRule9200": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "9200",
                    "To": "9200"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 9200
            }
        },
        "PublicInboundRule9300": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "9300",
                    "To": "9300"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 9300
            }
        },

        "PublicInboundRule9999": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "203.234.106.78/32",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 9999
            }
        },

        "PublicOutboundRule110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "81",
                    "To": "81"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 110
            }
        },
        "PublicOutboundRule120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 120
            }
        },
        "PublicOutboundRule123": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": 17,
                "RuleAction": "allow",
                "RuleNumber": 123
            }
        },
        "PublicOutboundRule200": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 200
            }
        },
        "PublicOutboundRule210": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 210
            }
        },
        "PublicOutboundRule3306": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "3306",
                    "To": "3306"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 3306
            }
        },
        "PublicOutboundRule6379": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "6379",
                    "To": "6379"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 6379
            }
        },
        "PublicOutboundRule9200": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "9200",
                    "To": "9200"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 9200
            }
        },
        "PublicOutboundRule9300": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Fn::GetAtt": ["myVPC", "DefaultNetworkAcl"]
                },
                "PortRange": {
                    "From": "9300",
                    "To": "9300"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 9300
            }
        },
        "PrivateInbountRule120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 120
            }
        },
        "PrivateInbountRule122": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "203.234.110.81/32",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 122
            }
        },

        "PrivateInbountRule123": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": 17,
                "RuleAction": "allow",
                "RuleNumber": 123
            }
        },

        "PrivateInbountRule130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "6379",
                    "To": "6379"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 130
            }
        },

        "PrivateInbountRule140": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 140
            }
        },

        "PrivateInbountRule200": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 200
            }
        },
        "PrivateInbountRule201": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 201
            }
        },

        "PrivateInbountRule3306": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": false,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "3306",
                    "To": "3306"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 3306
            }
        },

        "PrivateOutbountRule100": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 100
            }
        },

        "PrivateOutbountRule110": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 110
            }
        },
        "PrivateOutbountRule120": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 120
            }
        },
        "PrivateOutbountRule123": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "123",
                    "To": "123"
                },
                "Protocol": 17,
                "RuleAction": "allow",
                "RuleNumber": 123
            }
        },

        "PrivateOutbountRule125": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "6379",
                    "To": "6379"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 125
            }
        },

        "PrivateOutbountRule130": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "10.0.0.0/16",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 130
            }
        },

        "PrivateOutbountRule131": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "Egress": true,
                "CidrBlock": "203.234.110.81/32",
                "NetworkAclId": {
                    "Ref": "NetworkAclPrivate"
                },
                "PortRange": {
                    "From": "22",
                    "To": "22"
                },
                "Protocol": 6,
                "RuleAction": "allow",
                "RuleNumber": 131
            }
        },

        "RouteTablePublic": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "myVPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "myRouteTablePublic"
                }]
            }
        },


        "RouteTablePrivate": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "myVPC"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "myRouteTablePrivate"
                }]
            }
        },
        "myInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [{
                    "Key": "Name",
                    "Value": "myInternetGateway"
                }]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "myVPC"
                },
                "InternetGatewayId": {
                    "Ref": "myInternetGateway"
                },
            }
        },
        "myInternetGatewayRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "myInternetGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "myInternetGateway"
                }
            }
        },
        "myInternetGatewayRoutePublic": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "myInternetGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePublic"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "myInternetGateway"
                }
            }
        },

        "SubnetRouteTableAssociationPrivate1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                },
                "SubnetId": {
                    "Ref": "Private1"
                }
            }
        },
        "SubnetRouteTableAssociationPrivate2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePrivate"
                },
                "SubnetId": {
                    "Ref": "Private2"
                }
            }
        },
        "SubnetRouteTableAssociationPublic": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTablePublic"
                },
                "SubnetId": {
                    "Ref": "Public"
                }
            }
        },

        "myS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": "developmemt.test",
            }
        },

        "S3Endpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [{
                        "Action": "*",
                        "Effect": "Allow",
                        "Resource": "*",
                        "Principal": "*"
                    }]
                },
                "RouteTableIds": [{
                    "Ref": "RouteTablePublic"
                }],
                "ServiceName": {
                    "Fn::Join": ["", ["com.amazonaws.", {
                        "Ref": "AWS::Region"
                    }, ".s3"]]
                },
                "VpcId": {
                    "Ref": "myVPC"
                }
            }
        },
        "SubnetGroup": {
            "Type": "AWS::ElastiCache::SubnetGroup",
            "Properties": {
                "CacheSubnetGroupName": "mySubnetGroup",
                "Description": "Cache Subnet Group",
                "SubnetIds": [{
                    "Ref": "Private1"
                }, {
                    "Ref": "Private2"
                }]
            }
        },

        "ElasticacheSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Elasticache Security Group",
                "VpcId": {
                    "Ref": "myVPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "6379",
                    "ToPort": "6379",
                    "CidrIp": "10.0.0.0/16"
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "myElasticacheSecurityGroup"
                }]
            },

        },
        "DBecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "RDS Security Group",
                "VpcId": {
                    "Ref": "myVPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "CidrIp": "10.0.0.0/16"
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "myDBSecurityGroup"
                }]
            },

        },
        "ElasticacheCluster": {
            "Type": "AWS::ElastiCache::CacheCluster",
            "Properties": {
                "AutoMinorVersionUpgrade": "true",
                "Engine": "redis",
                "CacheNodeType": "cache.r3.large",
                "CacheSubnetGroupName": {
                    "Ref": "SubnetGroup"
                },
                "ClusterName": "myRedis",
                "NumCacheNodes": "1",
                "VpcSecurityGroupIds": [{
                    "Fn::GetAtt": ["ElasticacheSecurityGroup", "GroupId"]
                }],
            },

        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "my DB subnet Group",
                "SubnetIds": [{
                    "Ref": "Private1"
                }, {
                    "Ref": "Private2"
                }],
                "Tags": [{
                    "Key": "Name",
                    "Value": "myDBsubnetGroup"
                }]
            }
        },
        "RDSCluster": {
            "Type": "AWS::RDS::DBCluster",
            "Properties": {
                "MasterUsername": "cyclon2",
                "MasterUserPassword": "mymusictaste",
                "Engine": "aurora",
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"

                },
            }
        },
        "RDSDBInstance": {
            "Type": "AWS::RDS::DBInstance",

            "Properties": {
                "DBInstanceIdentifier": "myDBinstance",
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Engine": "aurora",
                "DBClusterIdentifier": {
                    "Ref": "RDSCluster"
                },
                "PubliclyAccessible": "false",
                "DBInstanceClass": "db.r3.large",
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Properties": {
                "EC2VpcId": {
                    "Ref": "myVPC"
                },
                "DBSecurityGroupIngress": [{
                    "EC2SecurityGroupId": {
                        "Ref": "DBecurityGroup"
                    },
                }],
                "GroupDescription": "for aws aurora instances",
            }
        }
    },
}
